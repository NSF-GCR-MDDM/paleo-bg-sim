//Event action

#include "MiniBooNEBeamlineTrackingAction.hh"
#include "MiniBooNEBeamlineRunAction.hh"
#include "MiniBooNEBeamlineAnalysis.hh"
#include "G4Track.hh"
#include "G4RunManager.hh"
#include "G4TrackStatus.hh"
#include "G4SystemOfUnits.hh"
#include <cmath>

MiniBooNEBeamlineTrackingAction::MiniBooNEBeamlineTrackingAction(MiniBooNEBeamlineRunAction* runAction)
: G4UserTrackingAction(),
  fRunAction(runAction)
{} 

MiniBooNEBeamlineTrackingAction::~MiniBooNEBeamlineTrackingAction()
{}

void MiniBooNEBeamlineTrackingAction::PreUserTrackingAction(const G4Track* aTrack)
{
    //Look for protons, neutrons, pions, and kaons generated by the
    //primary protons in the target. Fill relevant histograms
    G4int parentID = aTrack->GetParentID();
    G4String volumeName = aTrack->GetVolume()->GetName();
    //    G4String materialName = aTrack->GetMaterial()->GetName();

    G4double density=-1.;
    G4int PDGCode2 = aTrack->GetDynamicParticle()->GetPDGcode();
                                               
    if (PDGCode2 == 13 && aTrack->GetParentID() == 0) //Saying that it is looking for parent muons
      {
	G4ThreeVector momentum2 = aTrack->GetMomentum();
	G4ThreeVector position2 = aTrack->GetPosition();
	G4double kinE2 = aTrack->GetKineticEnergy();
	
	G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
	analysisManager->FillNtupleIColumn(1, 0, PDGCode2);
	analysisManager->FillNtupleDColumn(1, 1, kinE2);
	analysisManager->FillNtupleDColumn(1, 2, momentum2.x());
	analysisManager->FillNtupleDColumn(1, 3, momentum2.y());
	analysisManager->FillNtupleDColumn(1, 4, momentum2.z());
	analysisManager->FillNtupleDColumn(1, 5, position2.x());
	analysisManager->FillNtupleDColumn(1, 6, position2.y());
	analysisManager->FillNtupleDColumn(1, 7, position2.z());
	analysisManager->AddNtupleRow(1);
	analysisManager->FillH1(5, kinE2);
	//std::cout<<parentID<<" "<<PDGCode2<<" "<<momentum2.x()<<" "<<momentum2.y()<<" "<<momentum2.z()<<" "<<aTrack->GetKineticEnergy()<<" "<<volumeName<<" "<<aTrack->GetCurrentStepNumber()<<std::endl;
    	
      } 
        
    G4ThreeVector momentum = aTrack->GetMomentum();
    G4double transMom = sqrt(momentum.x()*momentum.x() + momentum.y()*momentum.y());
    G4double kinEnergy = aTrack->GetKineticEnergy();
    
    //Finally, check what type of particle we have and fill the histograms
    G4int PDGCode = aTrack->GetDynamicParticle()->GetPDGcode();
    G4AnalysisManager* analysisManager = G4AnalysisManager::Instance();
    if (PDGCode == 2212) {          //proton
        analysisManager->FillH1(0, momentum.mag());
	analysisManager->FillH1(1, momentum.theta()*1000.0);
       
    }
    else if (PDGCode == 2112) {          //neutron
        analysisManager->FillH1(2, momentum.mag());
        analysisManager->FillH1(3, momentum.theta()*1000.0);
	analysisManager->FillH1(4, kinEnergy);
    }

}

void MiniBooNEBeamlineTrackingAction::PostUserTrackingAction(const G4Track* aTrack)
{   
    G4int PDGCode = aTrack->GetDynamicParticle()->GetPDGcode();
    G4AnalysisManager* analysisManager = G4AnalysisManager::Instance(); //ALEX OCT29
    
    
    if (PDGCode == -987654321) {
      
        //Check if the track has decayed. If so, add it to our n-tuples
        G4String procName = aTrack->GetStep()->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName();
	//	std::cout<<PDGCode<<" "<<procName<<std::endl;
        if (aTrack->GetTrackStatus() == fStopAndKill && procName == "Decay") {
            //Get some useful information about the track kinematics
            //that we will put in our trees
            G4double kinE = aTrack->GetKineticEnergy();
            G4ThreeVector momentum = aTrack->GetMomentum();
            G4ThreeVector position = aTrack->GetPosition();
            
            //Look for charged kaons to fill the charged kaon tree
            if (PDGCode == 321 || PDGCode == -321) {
    
                //Volume of the kaon at the time of decay
                G4String volumeName = aTrack->GetVolume()->GetName();
                
                //Position/volume of the kaon when it was created.
                G4ThreeVector positionVtx = aTrack->GetVertexPosition();
                G4String volumeNameVtx = aTrack->GetLogicalVolumeAtVertex()->GetName();
            
            } //End of kaon tree filling
        } //End of stop and kill / Decay conditional
    } //End of PDGCode check
}
